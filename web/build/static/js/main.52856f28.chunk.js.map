{"version":3,"sources":["AppNavbar.js","Home.js","GroupList.js","GroupEdit.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isOpen","toggle","bind","assertThisInitialized","setState","react_default","a","createElement","reactstrap_es","color","dark","expand","tag","Link","to","onClick","navbar","className","href","Component","Home","isLoading","isAuthenticated","user","undefined","cookies","csrfToken","get","login","logout","fetch","credentials","response","text","body","JSON","parse","port","window","location","hostname","method","headers","X-XSRF-TOKEN","then","res","json","logoutUrl","idToken","origin","message","name","button","AppNavbar_AppNavbar","fluid","withCookies","GroupList","groups","remove","_this2","data","catch","history","push","id","concat","Accept","Content-Type","updatedGroups","toConsumableArray","_this3","filter","i","_this4","_this$state","groupList","map","group","address","city","stateOrProvince","key","style","whiteSpace","events","event","Intl","DateTimeFormat","year","month","day","format","Date","date","title","size","width","withRouter","GroupEdit","emptyItem","country","postalCode","item","handleChange","handleSubmit","match","params","target","value","objectSpread","preventDefault","url","stringify","onSubmit","for","type","onChange","autoComplete","App","es6","BrowserRouter","Switch","Route","path","exact","component","Boolean","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52856f28.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nexport default class AppNavbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {isOpen: false};\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    return <Navbar color=\"dark\" dark expand=\"md\">\n      <NavbarBrand tag={Link} to=\"/\">Home</NavbarBrand>\n      <NavbarToggler onClick={this.toggle}/>\n      <Collapse isOpen={this.state.isOpen} navbar>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink\n              href=\"https://twitter.com/oktadev\">@oktadev</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://github.com/oktadeveloper/okta-spring-boot-react-crud-example\">GitHub</NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </Navbar>;\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\nimport { Button, Container } from 'reactstrap';\nimport { withCookies } from 'react-cookie';\n\nclass Home extends Component {\n  state = {\n    isLoading: true,\n    isAuthenticated: false,\n    user: undefined\n  };\n\n  constructor(props) {\n    super(props);\n    const {cookies} = props;\n    this.state.csrfToken = cookies.get('XSRF-TOKEN');\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n  }\n\n  async componentDidMount() {\n    const response = await fetch('/api/user', {credentials: 'include'});\n    const body = await response.text();\n    if (body === '') {\n      this.setState(({isAuthenticated: false}))\n    } else {\n      this.setState({isAuthenticated: true, user: JSON.parse(body)})\n    }\n  }\n\n  login() {\n    let port = (window.location.port ? ':' + window.location.port : '');\n    if (port === ':3000') {\n      port = ':8080';\n    }\n    window.location.href = '//' + window.location.hostname + port + '/private';\n  }\n\n  logout() {\n    fetch('/api/logout', {method: 'POST', credentials: 'include',\n      headers: {'X-XSRF-TOKEN': this.state.csrfToken}}).then(res => res.json())\n      .then(response => {\n        window.location.href = response.logoutUrl + \"?id_token_hint=\" +\n          response.idToken + \"&post_logout_redirect_uri=\" + window.location.origin;\n      });\n  }\n\n  render() {\n    const message = this.state.user ?\n      <h2>Welcome, {this.state.user.name}!</h2> :\n      <p>Please log in to manage your JUG Tour.</p>;\n\n    const button = this.state.isAuthenticated ?\n      <div>\n        <Button color=\"link\"><Link to=\"/groups\">Manage JUG Tour</Link></Button>\n        <br/>\n        <Button color=\"link\" onClick={this.logout}>Logout</Button>\n      </div> :\n      <Button color=\"primary\" onClick={this.login}>Login</Button>;\n\n    return (\n      <div>\n        <AppNavbar/>\n        <Container fluid>\n          {message}\n          {button}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default withCookies(Home);","import React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { Link, withRouter } from 'react-router-dom';\nimport { instanceOf } from 'prop-types';\nimport { withCookies, Cookies } from 'react-cookie';\n\nclass GroupList extends Component {\n\n\tstatic propTypes = {\n\t    cookies: instanceOf(Cookies).isRequired\n\t  };\n\n\t  constructor(props) {\n\t    super(props);\n\t    const {cookies} = props;\n\t    this.state = {groups: [], csrfToken: cookies.get('XSRF-TOKEN'), isLoading: true};\n\t    this.remove = this.remove.bind(this);\n\t  }\n\n\t  componentDidMount() {\n\t    this.setState({isLoading: true});\n\n\t    fetch('api/groups', {credentials: 'include'})\n\t      .then(response => response.json())\n\t      .then(data => this.setState({groups: data, isLoading: false}))\n\t      .catch(() => this.props.history.push('/'));\n\t  }\n\n\t  async remove(id) {\n\t    await fetch(`/api/group/${id}`, {\n\t      method: 'DELETE',\n\t      headers: {\n\t        'X-XSRF-TOKEN': this.state.csrfToken,\n\t        'Accept': 'application/json',\n\t        'Content-Type': 'application/json'\n\t      },\n\t      credentials: 'include'\n\t    }).then(() => {\n\t        let updatedGroups = [...this.state.groups].filter(i => i.id !== id);\n\t        this.setState({groups: updatedGroups});\n\t      });\n\t  }\n\n  render() {\n    const {groups, isLoading} = this.state;\n\n    if (isLoading) {\n      return <p>Loading...</p>;\n    }\n\n    const groupList = groups.map(group => {\n      const address = `${group.address || ''} ${group.city || ''} ${group.stateOrProvince || ''}`;\n      return <tr key={group.id}>\n        <td style={{whiteSpace: 'nowrap'}}>{group.name}</td>\n        <td>{address}</td>\n        <td>{group.events.map(event => {\n          return <div key={event.id}>{new Intl.DateTimeFormat('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: '2-digit'\n          }).format(new Date(event.date))}: {event.title}</div>\n        })}</td>\n        <td>\n          <ButtonGroup>\n            <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/groups/\" + group.id}>Edit</Button>\n            <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(group.id)}>Delete</Button>\n          </ButtonGroup>\n        </td>\n      </tr>\n    });\n\n    return (\n      <div>\n        <AppNavbar/>\n        <Container fluid>\n          <div className=\"float-right\">\n            <Button color=\"success\" tag={Link} to=\"/groups/new\">Add Group</Button>\n          </div>\n          <h3>My JUG Tour</h3>\n          <Table className=\"mt-4\">\n            <thead>\n            <tr>\n              <th width=\"20%\">Name</th>\n              <th width=\"20%\">Location</th>\n              <th>Events</th>\n              <th width=\"10%\">Actions</th>\n            </tr>\n            </thead>\n            <tbody>\n            {groupList}\n            </tbody>\n          </Table>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default withCookies(withRouter(GroupList));","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { instanceOf } from 'prop-types';\nimport { Cookies, withCookies } from 'react-cookie';\n\nclass GroupEdit extends Component {\n\n\tstatic propTypes = {\n\t    cookies: instanceOf(Cookies).isRequired\n\t  };\n\t\n\t  emptyItem = {\n\t    name: '',\n\t    address: '',\n\t    city: '',\n\t    stateOrProvince: '',\n\t    country: '',\n\t    postalCode: ''\n\t  };\n\t\n\t  constructor(props) {\n\t    super(props);\n\t    const {cookies} = props;\n\t    this.state = {\n\t      item: this.emptyItem,\n\t      csrfToken: cookies.get('XSRF-TOKEN')\n\t    };\n\t    this.handleChange = this.handleChange.bind(this);\n\t    this.handleSubmit = this.handleSubmit.bind(this);\n\t  }\n\t\n\t  async componentDidMount() {\n\t    if (this.props.match.params.id !== 'new') {\n\t      try {\n\t        const group = await (await fetch(`/api/group/${this.props.match.params.id}`, {credentials: 'include'})).json();\n\t        this.setState({item: group});\n\t      } catch (error) {\n\t        this.props.history.push('/');\n\t      }\n\t    }\n\t  }\n\t\n\t  handleChange(event) {\n\t    const target = event.target;\n\t    const value = target.value;\n\t    const name = target.name;\n\t    let item = {...this.state.item};\n\t    item[name] = value;\n\t    this.setState({item});\n\t  }\n\t\n\t  async handleSubmit(event) {\n\t    event.preventDefault();\n\t    const {item, csrfToken} = this.state;\n\t\n\t    let url = (item.id) ? `/api/group/${item.id}` : `/api/group/`;\n\t    \n\t    await fetch(url, {\n\t      method: (item.id) ? 'PUT' : 'POST',\n\t      headers: {\n\t        'X-XSRF-TOKEN': this.state.csrfToken,\n\t        'Accept': 'application/json',\n\t        'Content-Type': 'application/json'\n\t      },\n\t      body: JSON.stringify(item),\n\t      credentials: 'include'\n\t    });\n\t    this.props.history.push('/groups');\n\t  }\n\n  render() {\n    const {item} = this.state;\n    const title = <h2>{item.id ? 'Edit Group' : 'Add Group'}</h2>;\n\n    return <div>\n      <AppNavbar/>\n      <Container>\n        {title}\n        <Form onSubmit={this.handleSubmit}>\n          <FormGroup>\n            <Label for=\"name\">Name</Label>\n            <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''}\n                   onChange={this.handleChange} autoComplete=\"name\"/>\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"address\">Address</Label>\n            <Input type=\"text\" name=\"address\" id=\"address\" value={item.address || ''}\n                   onChange={this.handleChange} autoComplete=\"address-level1\"/>\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"city\">City</Label>\n            <Input type=\"text\" name=\"city\" id=\"city\" value={item.city || ''}\n                   onChange={this.handleChange} autoComplete=\"address-level1\"/>\n          </FormGroup>\n          <div className=\"row\">\n            <FormGroup className=\"col-md-4 mb-3\">\n              <Label for=\"stateOrProvince\">State/Province</Label>\n              <Input type=\"text\" name=\"stateOrProvince\" id=\"stateOrProvince\" value={item.stateOrProvince || ''}\n                     onChange={this.handleChange} autoComplete=\"address-level1\"/>\n            </FormGroup>\n            <FormGroup className=\"col-md-5 mb-3\">\n              <Label for=\"country\">Country</Label>\n              <Input type=\"text\" name=\"country\" id=\"country\" value={item.country || ''}\n                     onChange={this.handleChange} autoComplete=\"address-level1\"/>\n            </FormGroup>\n            <FormGroup className=\"col-md-3 mb-3\">\n              <Label for=\"country\">Postal Code</Label>\n              <Input type=\"text\" name=\"postalCode\" id=\"postalCode\" value={item.postalCode || ''}\n                     onChange={this.handleChange} autoComplete=\"address-level1\"/>\n            </FormGroup>\n          </div>\n          <FormGroup>\n            <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n            <Button color=\"secondary\" tag={Link} to=\"/groups\">Cancel</Button>\n          </FormGroup>\n        </Form>\n      </Container>\n    </div>\n  }\n}\n\nexport default withCookies(withRouter(GroupEdit));","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport GroupList from './GroupList';\nimport GroupEdit from './GroupEdit';\nimport { CookiesProvider } from 'react-cookie';\n\nclass App extends Component {\n  render() {\n    return (\n    \t<CookiesProvider>\n    \t<Router>\n\t        <Switch>\n\t        \t<Route path='/' exact={true} component={Home}/>\n\t        \t<Route path='/groups' exact={true} component={GroupList}/>\n\t        \t<Route path='/groups/:id' component={GroupEdit}/>\n\t        </Switch>\n        </Router>\n        </CookiesProvider>\n      \n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}